diff --git a/build/my-example/CMakeLists.txt b/build/my-example/CMakeLists.txt
index f6f62dc..7ee9083 100644
--- a/build/my-example/CMakeLists.txt
+++ b/build/my-example/CMakeLists.txt
@@ -1,4 +1,9 @@
 cmake_minimum_required(VERSION 3.10)
+enable_language(C CXX ASM)
+project(keystone C)
+include(ProcessorCount)
+set(CMAKE_VERBOSE_MAKEFILE ON)
+
 enable_language(C CXX ASM)
 
 include(macros.cmake)
@@ -35,9 +40,8 @@ set(KEYSTONE_LIB_EAPP ${KEYSTONE_SDK_DIR}/lib/libkeystone-eapp.a)
 find_program(MAKESELF makeself)
 
 # create a phony target "examples"
-add_custom_target("examples")
+add_custom_target("victim")
 
 # add all examples below
- 
 add_subdirectory(hello-native)
- 
+
diff --git a/build/my-example/hello-native/CMakeLists.txt b/build/my-example/hello-native/CMakeLists.txt
index 480f104..0aeac68 100644
--- a/build/my-example/hello-native/CMakeLists.txt
+++ b/build/my-example/hello-native/CMakeLists.txt
@@ -1,10 +1,13 @@
 set(eapp_bin hello-native)
 set(eapp_src eapp/eapp_native.c)
+set(eapp_lds hello-native/eapp/eapp_native.lds)
 set(host_bin hello-native-runner)
 set(host_src host/host_native.cpp)
+set(host_lds hello-native/host/host_native.lds)
 set(package_name "hello-native.ke")
 set(package_script "./hello-native-runner hello-native eyrie-rt")
 
+
 if(RISCV32)
   set(eyrie_plugins "rv32 freemem")
 else()
@@ -14,7 +17,9 @@ endif()
 # eapp
 
 add_executable(${eapp_bin} ${eapp_src})
-target_link_libraries(${eapp_bin} "-nostdlib -static" ${KEYSTONE_LIB_EAPP} ${KEYSTONE_LIB_EDGE})
+# target_link_libraries(${eapp_bin} "-nostdlib -static" ${KEYSTONE_LIB_EAPP} ${KEYSTONE_LIB_EDGE})  # original
+target_link_libraries(${eapp_bin} "-nostdlib -static" -T${CMAKE_SOURCE_DIR}/${eapp_lds} ${KEYSTONE_LIB_EAPP} ${KEYSTONE_LIB_EDGE}) # using LDS
+
 
 target_include_directories(${eapp_bin}
   PUBLIC ${KEYSTONE_SDK_DIR}/include/app
@@ -23,8 +28,10 @@ target_include_directories(${eapp_bin}
 # host
 
 add_executable(${host_bin} ${host_src})
-target_link_libraries(${host_bin} ${KEYSTONE_LIB_HOST} ${KEYSTONE_LIB_EDGE})
+# target_link_libraries(${host_bin} ${KEYSTONE_LIB_HOST} ${KEYSTONE_LIB_EDGE})  # original
+target_link_libraries(${host_bin} ${KEYSTONE_LIB_HOST} ${KEYSTONE_LIB_EDGE} -T${CMAKE_SOURCE_DIR}/${host_lds})  # using lds
 # add -std=c++11 flag
+
 set_target_properties(${host_bin}
   PROPERTIES CXX_STANDARD 11 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO
 )
@@ -50,4 +57,6 @@ add_keystone_package(${eapp_bin}-package
 add_dependencies(${eapp_bin}-package ${eapp_bin}-eyrie)
 
 # add package to the top-level target
-add_dependencies(examples ${eapp_bin}-package)
+add_dependencies(victim ${eapp_bin}-package)
+
+
diff --git a/build/my-example/hello-native/conf.h b/build/my-example/hello-native/conf.h
index ceec51b..4b18646 100644
--- a/build/my-example/hello-native/conf.h
+++ b/build/my-example/hello-native/conf.h
@@ -1,2 +1,2 @@
-// #define QEMU
-// #define JAM
\ No newline at end of file
+#define QEMU
+#define JAM
\ No newline at end of file
diff --git a/build/my-example/hello-native/eapp/eapp_native.c b/build/my-example/hello-native/eapp/eapp_native.c
index 0e37e5e..37890db 100644
--- a/build/my-example/hello-native/eapp/eapp_native.c
+++ b/build/my-example/hello-native/eapp/eapp_native.c
@@ -6,16 +6,31 @@
 #include "string.h"
 #include "edge_call.h"
 #include <syscall.h>
+#include "../conf.h"
 
 #define OCALL_PRINT_STRING 1
+#define OCALL_PRINT_VALUE 2
 
 unsigned long ocall_print_string(char* string);
+void ocall_print_value(unsigned long value);
 
-int main(){
+#ifdef JAM
+// volatile void RETURN_WRAPPER(void);
+volatile void RETURN_WRAPPER(void) __attribute__((section(".myWrapperSection")));
+// int main(void) __attribute__((section(".myEntrySection")));
+#endif
 
-  ocall_print_string("Hello World");
+int main() {
+  unsigned long val = 0xdeadbeef;
+  unsigned long addr = (unsigned long)&val;
 
+  ocall_print_string("Hello World");
+  ocall_print_value(addr);
+#ifdef JAM
+  RETURN_WRAPPER();
+#else
   EAPP_RETURN(0);
+#endif
 }
 
 unsigned long ocall_print_string(char* string){
@@ -23,3 +38,16 @@ unsigned long ocall_print_string(char* string){
   ocall(OCALL_PRINT_STRING, string, strlen(string)+1, &retval ,sizeof(unsigned long));
   return retval;
 }
+
+void ocall_print_value(unsigned long val){
+  unsigned long val_ = val;
+  ocall(OCALL_PRINT_VALUE, &val_, sizeof(unsigned long), 0, 0);
+
+  return;
+}
+
+#ifdef JAM
+volatile void RETURN_WRAPPER(void){
+  EAPP_RETURN(0);
+}
+#endif
diff --git a/build/my-example/hello-native/host/host_native.cpp b/build/my-example/hello-native/host/host_native.cpp
index 5f492f1..9838a72 100644
--- a/build/my-example/hello-native/host/host_native.cpp
+++ b/build/my-example/hello-native/host/host_native.cpp
@@ -5,11 +5,38 @@
 #include <edge_call.h>
 #include <keystone.h>
 
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <termios.h>
+#include <unistd.h>
+
+#include "../conf.h"
+
+#ifndef QEMU
+#define GPIO_BASE_ADDR  0x10060000
+#define GPIO_OUTPUT_EN  0x10060008
+#define GPIO_OUTPUT_VAL 0x1006000C
+#define GPIO_SIZE       0x100
+
+uint32_t *p_gpio_inst;
+#endif
+
 unsigned long
 print_string(char* str);
 void
-print_string_wrapper(void* buffer);
+print_string_wrapper(void* buffer); //__attribute__((section(".myRegisterFunctionSection")));
+void
+print_value(unsigned long val);
+void
+print_value_wrapper(void* buffer);
 #define OCALL_PRINT_STRING 1
+#define OCALL_PRINT_VALUE 2
+
+uint64_t g_val;  // 不正アクセス先ターゲット
 
 /***
  * An example call that will be exposed to the enclave application as
@@ -22,26 +49,117 @@ print_string(char* str) {
   return printf("Enclave said: \"%s\"\n", str);
 }
 
+void
+print_value(unsigned long val) {
+  printf("Enclave said value: %lx\n", val);
+  return;
+}
+
+
 int
 main(int argc, char** argv) {
   Keystone::Enclave enclave;
   Keystone::Params params;
 
+  printf("changed: 24-02-21 v5\n");  
+  printf("[happ] main@%p\n", main);
+  int i;
+
+#ifdef TEST
+  /* INVESTIGATE: memory map */
+  printf("[happ] main@%p\n", main);
+
+  // test 2023/08/22 20:12:56
+  // uint64_t *ptr;
+  uint8_t *ptr;
+  ptr = (uint8_t *) 0x11000; // entry point
+  printf("dump entry\n");
+  for(i=0; i < 64; i++) {
+    if (i % 8 == 0) printf("%p: ", ptr);
+    printf("%02x ", (uint32_t)*ptr);
+    if (i % 8 == 7) printf("\n");
+    ptr++;
+  }
+
+  ptr = (uint8_t *) 0x1167a;
+  printf("dump\n");
+  for(i=0; i < 64; i++) {
+    if (i % 8 == 0) printf("%p: ", ptr);
+    printf("%02x ", (uint32_t)*ptr);
+    if (i % 8 == 7) printf("\n");
+    ptr++;
+  }
+#endif
+  // -------------------------
+
+
+#ifndef QEMU
+  int dh = open("/dev/mem", O_RDWR | O_SYNC);  // Open /dev/mem which represents the whole physical memory
+  p_gpio_inst = (uint32_t *)mmap(NULL, GPIO_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, dh, GPIO_BASE_ADDR);  // Memory map AXI GPIO register block
+
+  // ------ GPIO on&off -------
+  p_gpio_inst[0x8 >> 2] = 0x1ff;  // GPIO0-8
+  printf("GPIO enable: %p = 0x%04x\n", &p_gpio_inst[0x8 >> 2], p_gpio_inst[0x8 >> 2]);
+  // ON
+  // printf("%p = 0x%04x\n", &p_gpio_inst[0xc >> 2], p_gpio_inst[0xc >> 2]);
+
+  p_gpio_inst[0xC >> 2] |= 0x40; // GPIO6 for all execution time
+  // printf("%p = 0x%04x\n", &p_gpio_inst[0xc >> 2], p_gpio_inst[0xc >> 2]);
+  // printf("%p = 0x%04x\n", &p_gpio_inst[0xc >> 2], p_gpio_inst[0xc >> 2]);
+  // ---------------------------
+#endif
+// // ------------------------------------- mmap() attack test --------------------------
+//   #define ADDR 0x120000
+//   int fd = open("/dev/zero", O_RDONLY);
+//   uint64_t *addr = (uint64_t*)mmap((uint64_t*)ADDR, 4096, PROT_READ | PROT_WRITE | PROT_EXEC,
+//                       MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, fd, 0);
+// // -----------------------------------------------------------------------------------
+//   printf("%p %x\n", addr, *addr);
+
   params.setFreeMemSize(1024 * 1024);
-  params.setUntrustedMem(DEFAULT_UNTRUSTED_PTR, 1024 * 1024);
+  params.setUntrustedMem(DEFAULT_UNTRUSTED_PTR, 1024 * 1024);  // 0xffff_ffff_8000_0000
+
+#ifndef QEMU
+  p_gpio_inst[0xC >> 2] |= 0x80; // GPIO7
+#endif
+  enclave.init(argv[1], argv[2], params);  // create
+#ifndef QEMU
+  p_gpio_inst[0xC >> 2] &= ~0x80; // GPIO7
+#endif
 
-  enclave.init(argv[1], argv[2], params);
+  /* INFO */
+  // argv[0]: hello-native-runner (happ)
+  // argv[1]: hello-native (eapp)
+  // argv[2]: eyrie-rt (runtime)
+  // argv[3]: access address (for happ)
+  printf("%s, %s, %s\n", argv[1], argv[2], argv[3]);
 
+  /* --- 不正アクセスの設定 --- */
+  if (argv[3] == NULL) {
+    g_val = 0xff;
+  }
+  else {
+    g_val = strtol(argv[3], NULL, 16);
+  }
+  // -------------------------
+  
   enclave.registerOcallDispatch(incoming_call_dispatch);
 
-  /* We must specifically register functions we want to export to the
-     enclave. */
   register_call(OCALL_PRINT_STRING, print_string_wrapper);
+  // register_call(OCALL_PRINT_VALUE, print_value_wrapper);
 
   edge_call_init_internals(
       (uintptr_t)enclave.getSharedBuffer(), enclave.getSharedBufferSize());
 
+  printf("[happ] run enclave\n");
   enclave.run();
+  printf("[happ] exit\n");
+
+#ifndef QEMU
+  // p_gpio_inst[0xC >> 2] &= ~0x40; // GPIO6
+  p_gpio_inst[0xC >> 2] &= ~0x1ff; // GPIO0-8 OFF // 念のため
+  munmap(p_gpio_inst, GPIO_SIZE);
+#endif
 
   return 0;
 }
@@ -52,16 +170,45 @@ main(int argc, char** argv) {
  ***/
 void
 print_string_wrapper(void* buffer) {
+// #ifndef QEMU
+//   // OFF
+//   uint32_t val = p_gpio_inst[0xC >> 2];
+//   p_gpio_inst[0xC >> 2] &= ~0x02;
+//   printf("GPIO enable status: 0x%04x\n", val);
+// #endif
+  
   /* Parse and validate the incoming call data */
   struct edge_call* edge_call = (struct edge_call*)buffer;
   uintptr_t call_args;
   unsigned long ret_val;
   size_t arg_len;
+
   if (edge_call_args_ptr(edge_call, &call_args, &arg_len) != 0) {
     edge_call->return_data.call_status = CALL_STATUS_BAD_OFFSET;
     return;
   }
 
+  /** 勝手にアクセス---------------------------- **/
+  int i;
+  uint32_t *mem;
+
+  if (g_val != 0xff) {
+    int dh = open("/dev/mem", O_RDWR | O_SYNC);  // Open /dev/mem which represents the whole physical memory
+
+    printf("address 0x%lx@", (unsigned int)g_val);
+
+    // 物理・論理アドレスの変換
+    mem = (uint32_t *)mmap(NULL, 0x100, PROT_READ | PROT_WRITE, MAP_SHARED, dh, g_val);
+    printf("%p\n", mem);
+
+    for(i = 0; i < 16; i+=2) {
+      printf("0x%08x: %08x %08x\n", g_val + i * 8, *(mem + i), *(mem + i + 1));
+    }
+  } else {
+    printf("addr is NULL\n");
+  }
+  /** ---------------------------- **/
+
   /* Pass the arguments from the eapp to the exported ocall function */
   ret_val = print_string((char*)call_args);
 
@@ -78,3 +225,24 @@ print_string_wrapper(void* buffer) {
   /* This will now eventually return control to the enclave */
   return;
 }
+
+
+void
+print_value_wrapper(void* buffer) {
+  /* For now we assume the call struct is at the front of the shared
+   * buffer. This will have to change to allow nested calls. */
+  struct edge_call* edge_call = (struct edge_call*)buffer;
+
+  uintptr_t call_args;
+  unsigned long ret_val;
+  size_t args_len;
+  if (edge_call_args_ptr(edge_call, &call_args, &args_len) != 0) {
+    edge_call->return_data.call_status = CALL_STATUS_BAD_OFFSET;
+    return;
+  }
+
+  print_value(*(unsigned long*)call_args);
+
+  edge_call->return_data.call_status = CALL_STATUS_OK;
+  return;
+}
diff --git a/build/my-example/macros.cmake b/build/my-example/macros.cmake
index 34a53cd..5e9a041 100644
--- a/build/my-example/macros.cmake
+++ b/build/my-example/macros.cmake
@@ -28,7 +28,8 @@ macro(use_riscv_toolchain bits)
   set(AR              ${CROSSCOMPILE}ar)
   set(OBJCOPY         ${CROSSCOMPILE}objcopy)
   set(OBJDUMP         ${CROSSCOMPILE}objdump)
-  set(CFLAGS          "-Wall -Werror")
+  # set(CFLAGS          "-Wall -Werror")
+  set(CFLAGS          "-Wall -Werror -static")
 
   global_set(CMAKE_C_COMPILER        ${CC}${EXT})
   global_set(CMAKE_ASM_COMPILER        ${CC}${EXT})
